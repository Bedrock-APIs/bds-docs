import * as _00 from '@minecraft/common';
export enum Direction {down = 0, east = 5, north = 2, south = 3, up = 1, west = 4}
export enum EntityDamageCause {anvil = "anvil", blockExplosion = "block_explosion", campfire = "campfire", charging = "charging", contact = "contact", drowning = "drowning", entityAttack = "entity_attack", entityExplosion = "entity_explosion", fall = "fall", fallingBlock = "falling_block", fire = "fire", fireTick = "fire_tick", fireworks = "fireworks", flyIntoWall = "fly_into_wall", freezing = "freezing", lava = "lava", lightning = "lightning", magic = "magic", magma = "magma", none = "none", override = "override", piston = "piston", projectile = "projectile", ramAttack = "ram_attack", sonicBoom = "sonic_boom", soulCampfire = "soul_campfire", stalactite = "stalactite", stalagmite = "stalagmite", starve = "starve", suffocation = "suffocation", suicide = "suicide", temperature = "temperature", thorns = "thorns", void = "void", wither = "wither"}
export enum GameMode {adventure = 2, creative = 1, spectator = 6, survival = 0}
export enum ScoreboardIdentityType {entity = 2, fakePlayer = 3, player = 1}
//@ts-ignore allow class inheritance for native classes
export class BeforeChatEvent extends ChatEvent{ private constructor(); cancel: boolean; targets: Player[]}
export class BeforeChatEventSignal { private constructor(); subscribe(callback: (arg0: BeforeChatEvent)=>void): (arg0: BeforeChatEvent)=>void; unsubscribe(callback: (arg0: BeforeChatEvent)=>void): void}
//@ts-ignore allow class inheritance for native classes
export class BeforeItemUseEvent extends ItemUseEvent{ private constructor(); cancel: boolean}
export class BeforeItemUseEventSignal { private constructor(); subscribe(callback: (arg0: BeforeItemUseEvent)=>void): (arg0: BeforeItemUseEvent)=>void; unsubscribe(callback: (arg0: BeforeItemUseEvent)=>void): void}
//@ts-ignore allow class inheritance for native classes
export class BeforeItemUseOnEvent extends ItemUseOnEvent{ private constructor(); cancel: boolean}
export class BeforeItemUseOnEventSignal { private constructor(); subscribe(callback: (arg0: BeforeItemUseOnEvent)=>void): (arg0: BeforeItemUseOnEvent)=>void; unsubscribe(callback: (arg0: BeforeItemUseOnEvent)=>void): void}
export class Block { private constructor(); readonly dimension: Dimension; readonly id: string; readonly isEmpty: boolean; isWaterlogged: boolean; readonly location: BlockLocation; readonly permutation: BlockPermutation; readonly 'type': BlockType; readonly x: number; readonly y: number; readonly z: number; getComponent(componentName: string): BlockComponent; getTags(): string[]; hasTag(tag: string): boolean; setPermutation(permutation: BlockPermutation): void; setType(blockType: BlockType): void}
export class BlockAreaSize { constructor(x: number, y: number, z: number); x: number; y: number; z: number; equals(other: BlockAreaSize): boolean}
//@ts-ignore allow class inheritance for native classes
export class BlockComponent extends Component{ private constructor(); readonly location: BlockLocation}
export class BlockEvent { private constructor(); readonly block: Block; readonly dimension: Dimension}
//@ts-ignore allow class inheritance for native classes
export class BlockInventoryComponent extends BlockComponent{ private constructor(); readonly container?: BlockInventoryComponentContainer}
export class BlockInventoryComponentContainer { private constructor(); readonly emptySlotsCount: number; readonly size: number; addItem(itemStack: ItemStack): void; getItem(slot: number): ItemStack; setItem(slot: number, itemStack: ItemStack): void; swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean; transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean}
//@ts-ignore allow class inheritance for native classes
export class BlockLavaContainerComponent extends BlockLiquidContainerComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class BlockLiquidContainerComponent extends BlockComponent{ private constructor(); fillLevel: number}
export class BlockLocation { constructor(x: number, y: number, z: number); x: number; y: number; z: number; above(): BlockLocation; blocksBetween(other: BlockLocation): BlockLocation[]; equals(other: BlockLocation): boolean; offset(x: number, y: number, z: number): BlockLocation}
export class BlockPermutation { private constructor(); readonly 'type': BlockType; clone(): BlockPermutation; getAllProperties(): IBlockProperty[]; getProperty(propertyName: string): IBlockProperty; getTags(): string[]; hasTag(tag: string): boolean}
//@ts-ignore allow class inheritance for native classes
export class BlockPistonComponent extends BlockComponent{ private constructor(); readonly attachedBlocks: BlockLocation[]; readonly isExpanded: boolean; readonly isExpanding: boolean; readonly isMoving: boolean; readonly isRetracted: boolean; readonly isRetracting: boolean}
//@ts-ignore allow class inheritance for native classes
export class BlockPotionContainerComponent extends BlockLiquidContainerComponent{ private constructor(); setPotionType(item: ItemStack): void}
export class BlockRaycastOptions { constructor(); includeLiquidBlocks?: boolean; includePassableBlocks?: boolean; maxDistance?: number}
export class BlockRecordPlayerComponent { private constructor(); clearRecord(): void; isPlaying(): boolean; setRecord(recordItemType: ItemType): void}
//@ts-ignore allow class inheritance for native classes
export class BlockSnowContainerComponent extends BlockLiquidContainerComponent{ private constructor()}
export class BlockType { private constructor(); readonly canBeWaterlogged: boolean; readonly id: string; createDefaultBlockPermutation(): BlockPermutation}
//@ts-ignore allow class inheritance for native classes
export class BlockWaterContainerComponent extends BlockLiquidContainerComponent{ private constructor(); addDye(itemType: ItemType): void}
//@ts-ignore allow class inheritance for native classes
export class BoolBlockProperty extends IBlockProperty{ private constructor(); readonly validValues: boolean[]; value: boolean}
export class ChatEvent { private constructor(); message: string; sender: Player; sendToTargets: boolean; targets: Player[]}
export class Color { constructor(red: number, green: number, blue: number, alpha: number); alpha: number; blue: number; green: number; red: number}
export class Component { private constructor(); readonly id: string}
export class Container { private constructor(); readonly emptySlotsCount: number; readonly size: number; addItem(itemStack: ItemStack): void; getItem(slot: number): ItemStack; setItem(slot: number, itemStack: ItemStack): void; swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean; transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean}
export class DataDrivenEntityTriggerEvent { private constructor(); readonly entity: Entity; readonly id: string; readonly modifiers: DefinitionModifier[]}
export class DataDrivenEntityTriggerEventSignal { private constructor(); subscribe(callback: (arg0: DataDrivenEntityTriggerEvent)=>void, options?: EntityDataDrivenTriggerEventOptions): (arg0: DataDrivenEntityTriggerEvent)=>void; unsubscribe(callback: (arg0: DataDrivenEntityTriggerEvent)=>void): void}
export class DefinitionModifier { constructor(); readonly componentGroupsToAdd: string[]; readonly componentGroupsToRemove: string[]; triggers: Trigger[]}
export class Dimension { private constructor(); readonly id: string; createExplosion(location: Location, radius: number, explosionOptions: ExplosionOptions): void; getBlock(location: BlockLocation): Block; getBlockFromRay(location: Location, direction: Vector, options?: BlockRaycastOptions): Block; getEntities(options?: EntityQueryOptions): EntityIterator; getEntitiesAtBlockLocation(location: BlockLocation): Entity[]; getEntitiesFromRay(location: Location, direction: Vector, options?: EntityRaycastOptions): Entity[]; getPlayers(options?: EntityQueryOptions): PlayerIterator; isEmpty(location: BlockLocation): boolean; runCommand(commandString: string): any; spawnEntity(identifier: string, location: BlockLocation | Location): Entity; spawnItem(item: ItemStack, location: BlockLocation | Location): Entity; spawnParticle(effectName: string, location: Location, molangVariables: MolangVariableMap): void}
export class DynamicPropertiesDefinition { constructor(); defineBoolean(identifier: string, defaultValue?: boolean): DynamicPropertiesDefinition; defineNumber(identifier: string, defaultValue?: number): DynamicPropertiesDefinition; defineString(identifier: string, maxLength: number, defaultValue?: string): DynamicPropertiesDefinition}
export class Effect { private constructor(); readonly amplifier: number; readonly displayName: string; readonly duration: number}
export class EffectType { private constructor(); getName(): string}
export class EnchantmentSlot { private constructor()}
export class Entity { private constructor(); readonly dimension: Dimension; readonly headLocation: Location; readonly id: string; isSneaking: boolean; readonly location: Location; nameTag: string; readonly rotation: XYRotation; target: Entity; readonly velocity: Vector; readonly viewVector: Vector; addEffect(effectType: EffectType, duration: number, amplifier: number, showParticles?: boolean): void; addTag(tag: string): boolean; getBlockFromViewVector(options?: BlockRaycastOptions): Block; getComponent(componentId: string): IEntityComponent; getComponents(): IEntityComponent[]; getDynamicProperty(identifier: string): boolean | number | number | Location | string; getEffect(effectType: EffectType): Effect; getEntitiesFromViewVector(options?: EntityRaycastOptions): Entity[]; getTags(): string[]; hasComponent(componentId: string): boolean; hasTag(tag: string): boolean; kill(): void; removeDynamicProperty(identifier: string): boolean; removeTag(tag: string): boolean; runCommand(commandString: string): any; setDynamicProperty(identifier: string, value: boolean | number | number | Location | string): void; setRotation(degreesX: number, degreesY: number): void; setVelocity(velocity: Vector): void; teleport(location: Location, dimension: Dimension, xRotation: number, yRotation: number, keepVelocity: boolean): void; teleportFacing(location: Location, dimension: Dimension, facingLocation: Location, keepVelocity: boolean): void; triggerEvent(eventName: string): void}
//@ts-ignore allow class inheritance for native classes
export class EntityAddRiderComponent extends IEntityComponent{ private constructor(); readonly entityType: string; readonly spawnEvent: string}
//@ts-ignore allow class inheritance for native classes
export class EntityAgeableComponent extends IEntityComponent{ private constructor(); readonly dropItems: string[]; readonly duration: number; readonly feedItems: EntityDefinitionFeedItem[]; readonly growUp: Trigger}
//@ts-ignore allow class inheritance for native classes
export class EntityAttributeComponent extends IEntityComponent{ private constructor(); readonly current: number; readonly value: number; resetToDefaultValue(): void; resetToMaxValue(): void; resetToMinValue(): void; setCurrent(value: number): boolean}
//@ts-ignore allow class inheritance for native classes
export class EntityBaseMovementComponent extends IEntityComponent{ private constructor(); readonly maxTurn: number}
//@ts-ignore allow class inheritance for native classes
export class EntityBreathableComponent extends IEntityComponent{ private constructor(); readonly breatheBlocks: BlockPermutation[]; readonly breathesAir: boolean; readonly breathesLava: boolean; readonly breathesSolids: boolean; readonly breathesWater: boolean; readonly generatesBubbles: boolean; readonly inhaleTime: number; readonly nonBreatheBlocks: BlockPermutation[]; readonly suffocateTime: number; readonly totalSupply: number; setAirSupply(value: number): void}
//@ts-ignore allow class inheritance for native classes
export class EntityCanClimbComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityCanFlyComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityCanPowerJumpComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityColorComponent extends IEntityComponent{ private constructor(); value: number}
export class EntityCreateEvent { private constructor(); entity: Entity}
export class EntityCreateEventSignal { private constructor(); subscribe(callback: (arg0: EntityCreateEvent)=>void): (arg0: EntityCreateEvent)=>void; unsubscribe(callback: (arg0: EntityCreateEvent)=>void): void}
export class EntityDataDrivenTriggerEventOptions { constructor(); entities?: Entity[]; entityTypes?: string[]; eventTypes?: string[]}
export class EntityDefinitionFeedItem { private constructor(); readonly growth: number; readonly item: string}
export class EntityEventOptions { constructor(); entities?: Entity[]; entityTypes?: string[]}
//@ts-ignore allow class inheritance for native classes
export class EntityFireImmuneComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityFloatsInLiquidComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityFlyingSpeedComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityFrictionModifierComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityGroundOffsetComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityHealableComponent extends IEntityComponent{ private constructor(); readonly filters: FilterGroup; readonly forceUse: boolean; readonly items: FeedItem[]}
//@ts-ignore allow class inheritance for native classes
export class EntityHealthComponent extends EntityAttributeComponent{ private constructor()}
export class EntityHitEvent { private constructor(); readonly entity: Entity; readonly hitBlock?: Block; readonly hitEntity?: Entity}
export class EntityHitEventSignal { private constructor(); subscribe(callback: (arg0: EntityHitEvent)=>void, options?: EntityEventOptions): (arg0: EntityHitEvent)=>void; unsubscribe(callback: (arg0: EntityHitEvent)=>void): void}
export class EntityHurtEvent { private constructor(); readonly cause: string; readonly damage: number; readonly damagingEntity?: Entity; readonly hurtEntity: Entity; readonly projectile?: Entity}
export class EntityHurtEventSignal { private constructor(); subscribe(callback: (arg0: EntityHurtEvent)=>void, options?: EntityEventOptions): (arg0: EntityHurtEvent)=>void; unsubscribe(callback: (arg0: EntityHurtEvent)=>void): void}
//@ts-ignore allow class inheritance for native classes
export class EntityInventoryComponent extends IEntityComponent{ private constructor(); readonly additionalSlotsPerStrength: number; readonly canBeSiphonedFrom: boolean; readonly container: InventoryComponentContainer; readonly containerType: string; readonly inventorySize: number; readonly private: boolean; readonly restrictToOwner: boolean}
//@ts-ignore allow class inheritance for native classes
export class EntityIsBabyComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsChargedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsChestedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsDyableComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsHiddenWhenInvisibleComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsIgnitedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsIllagerCaptainComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsSaddledComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsShakingComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsShearedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsStackableComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsStunnedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityIsTamedComponent extends IEntityComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityItemComponent extends IEntityComponent{ private constructor(); readonly itemStack: ItemStack}
export class EntityIterator { private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityLavaMovementComponent extends EntityAttributeComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityLeashableComponent extends IEntityComponent{ private constructor(); readonly softDistance: number; leash(leashHolder: Entity): void; unleash(): void}
//@ts-ignore allow class inheritance for native classes
export class EntityMarkVariantComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityMountTamingComponent extends IEntityComponent{ private constructor(); setTamed(showParticles: boolean): void}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementAmphibiousComponent extends IEntityComponent{ private constructor(); readonly maxTurn: number}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementBasicComponent extends IEntityComponent{ private constructor(); readonly maxTurn: number}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementComponent extends EntityAttributeComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementFlyComponent extends EntityBaseMovementComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementGenericComponent extends EntityBaseMovementComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementGlideComponent extends EntityBaseMovementComponent{ private constructor(); readonly speedWhenTurning: number; readonly startSpeed: number}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementHoverComponent extends EntityBaseMovementComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementJumpComponent extends EntityBaseMovementComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementSkipComponent extends EntityBaseMovementComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityMovementSwayComponent extends EntityBaseMovementComponent{ private constructor(); readonly swayAmplitude: number; readonly swayFrequency: number}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationClimbComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationComponent extends IEntityComponent{ private constructor(); readonly avoidDamageBlocks: boolean; readonly avoidPortals: boolean; readonly avoidSun: boolean; readonly avoidWater: boolean; readonly canBreach: boolean; readonly canBreakDoors: boolean; readonly canFloat: boolean; readonly canJump: boolean; readonly canOpenDoors: boolean; readonly canOpenIronDoors: boolean; readonly canPassDoors: boolean; readonly canPathFromAir: boolean; readonly canPathOverLava: boolean; readonly canPathOverWater: boolean; readonly canSink: boolean; readonly canSwim: boolean; readonly canWalk: boolean; readonly canWalkInLava: boolean; readonly isAmphibious: boolean}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationFloatComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationFlyComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationGenericComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationHoverComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityNavigationWalkComponent extends EntityNavigationComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityPushThroughComponent extends IEntityComponent{ private constructor(); value: number}
export class EntityQueryOptions { constructor(); closest?: number; excludeFamilies?: string[]; excludeGameModes?: GameMode[]; excludeNames?: string[]; excludeTags?: string[]; excludeTypes?: string[]; families?: string[]; farthest?: number; gameMode?: GameMode; location?: Location; maxDistance?: number; maxHorizontalRotation?: number; maxLevel?: number; maxVerticalRotation?: number; minDistance?: number; minHorizontalRotation?: number; minLevel?: number; minVerticalRotation?: number; name?: string; scoreOptions?: EntityQueryScoreOptions[]; tags?: string[]; 'type'?: string; volume?: BlockAreaSize}
export class EntityQueryScoreOptions { constructor(); exclude?: boolean; maxScore?: number; minScore?: number; objective?: string}
export class EntityRaycastOptions { constructor(); maxDistance?: number}
//@ts-ignore allow class inheritance for native classes
export class EntityRideableComponent extends IEntityComponent{ private constructor(); readonly controllingSeat: number; readonly crouchingSkipInteract: boolean; readonly familyTypes: string[]; readonly interactText: string; readonly pullInEntities: boolean; readonly riderCanInteract: boolean; readonly seatCount: number; readonly seats: Seat[]; addRider(rider: Entity): boolean; ejectRider(rider: Entity): void; ejectRiders(): void}
//@ts-ignore allow class inheritance for native classes
export class EntityScaleComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntitySkinIdComponent extends IEntityComponent{ private constructor(); value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityStrengthComponent extends IEntityComponent{ private constructor(); readonly max: number; readonly value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityTameableComponent extends IEntityComponent{ private constructor(); readonly probability: number; readonly tameItems: string[]; tame(): boolean}
export class EntityType { private constructor(); readonly id: string}
export class EntityTypeIterator { private constructor()}
export class EntityTypes { private constructor(); static get(identifier: string): EntityType; static getAll(): EntityTypeIterator}
//@ts-ignore allow class inheritance for native classes
export class EntityUnderwaterMovementComponent extends EntityAttributeComponent{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class EntityVariantComponent extends IEntityComponent{ private constructor(); readonly value: number}
//@ts-ignore allow class inheritance for native classes
export class EntityWantsJockeyComponent extends IEntityComponent{ private constructor()}
export class Events { private constructor(); readonly beforeChat: BeforeChatEventSignal; readonly beforeItemUse: BeforeItemUseEventSignal; readonly beforeItemUseOn: BeforeItemUseOnEventSignal; readonly dataDrivenEntityTriggerEvent: DataDrivenEntityTriggerEventSignal; readonly entityCreate: EntityCreateEventSignal; readonly entityHit: EntityHitEventSignal; readonly entityHurt: EntityHurtEventSignal; readonly itemCompleteCharge: ItemCompleteChargeEventSignal; readonly itemReleaseCharge: ItemReleaseChargeEventSignal; readonly itemStartCharge: ItemStartChargeEventSignal; readonly itemStopCharge: ItemStopChargeEventSignal; readonly itemUseOn: ItemUseOnEventSignal; readonly playerJoin: PlayerJoinEventSignal; readonly playerLeave: PlayerLeaveEventSignal; readonly tick: TickEventSignal; readonly weatherChange: WeatherChangeEventSignal; readonly worldInitialize: WorldInitializeEventSignal}
export class ExplosionOptions { constructor(); allowUnderwater?: boolean; breaksBlocks?: boolean; causesFire?: boolean; source?: Entity}
export class FeedItem { private constructor(); readonly effects: FeedItemEffect[]; readonly healAmount: number; readonly item: string}
export class FeedItemEffect { private constructor(); readonly amplifier: number; readonly chance: number; readonly duration: number; readonly name: string}
export class FilterGroup { private constructor()}
export class FluidContainer { private constructor(); static readonly maxFillLevel: 6; static readonly minFillLevel: 0}
export class IBlockProperty { private constructor(); readonly name: string}
//@ts-ignore allow class inheritance for native classes
export class IEntityComponent extends Component{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class IntBlockProperty extends IBlockProperty{ private constructor(); readonly validValues: number[]; value: number}
export class InventoryComponentContainer { private constructor(); readonly emptySlotsCount: number; readonly size: number; addItem(itemStack: ItemStack): void; getItem(slot: number): ItemStack; setItem(slot: number, itemStack: ItemStack): void; swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean; transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean}
export class ItemCompleteChargeEvent { private constructor(); readonly itemStack: ItemStack; readonly source: Player; readonly useDuration: number}
export class ItemCompleteChargeEventSignal { private constructor(); subscribe(callback: (arg0: ItemCompleteChargeEvent)=>void): (arg0: ItemCompleteChargeEvent)=>void; unsubscribe(callback: (arg0: ItemCompleteChargeEvent)=>void): void}
//@ts-ignore allow class inheritance for native classes
export class ItemComponent extends Component{ private constructor()}
//@ts-ignore allow class inheritance for native classes
export class ItemCooldownComponent extends ItemComponent{ private constructor(); readonly cooldownCategory: string; readonly cooldownTicks: number; startCooldown(player: Player): void}
//@ts-ignore allow class inheritance for native classes
export class ItemDurabilityComponent extends ItemComponent{ private constructor(); damage: number; readonly damageRange: NumberRange; readonly maxDurability: number; getDamageChance(unbreaking: number): number}
//@ts-ignore allow class inheritance for native classes
export class ItemFoodComponent extends ItemComponent{ private constructor(); readonly canAlwaysEat: boolean; readonly nutrition: number; readonly saturationModifier: number; readonly usingConvertsTo: string}
export class ItemReleaseChargeEvent { private constructor(); readonly itemStack: ItemStack; readonly source: Player; readonly useDuration: number}
export class ItemReleaseChargeEventSignal { private constructor(); subscribe(callback: (arg0: ItemReleaseChargeEvent)=>void): (arg0: ItemReleaseChargeEvent)=>void; unsubscribe(callback: (arg0: ItemReleaseChargeEvent)=>void): void}
export class Items { private constructor(); static get(itemId: string): ItemType}
export class ItemStack { constructor(itemType: ItemType | string, amount?: number, data?: number); amount: number; data: number; readonly id: string; nameTag?: string; getComponent(componentId: string): ItemComponent; getComponents(): ItemComponent[]; getLore(): string[]; hasComponent(componentId: string): boolean; setLore(loreList?: string[]): void; triggerEvent(eventName: string): void}
export class ItemStartChargeEvent { private constructor(); readonly itemStack: ItemStack; readonly source: Player; readonly useDuration: number}
export class ItemStartChargeEventSignal { private constructor(); subscribe(callback: (arg0: ItemStartChargeEvent)=>void): (arg0: ItemStartChargeEvent)=>void; unsubscribe(callback: (arg0: ItemStartChargeEvent)=>void): void}
export class ItemStopChargeEvent { private constructor(); readonly itemStack?: ItemStack; readonly source: Player; readonly useDuration: number}
export class ItemStopChargeEventSignal { private constructor(); subscribe(callback: (arg0: ItemStopChargeEvent)=>void): (arg0: ItemStopChargeEvent)=>void; unsubscribe(callback: (arg0: ItemStopChargeEvent)=>void): void}
export class ItemType { private constructor(); readonly id: string}
export class ItemUseEvent { private constructor(); item: ItemStack; readonly source: Player}
export class ItemUseOnEvent { private constructor(); readonly blockFace: Direction; readonly blockLocation: BlockLocation; item: ItemStack; readonly source: Player}
export class ItemUseOnEventSignal { private constructor(); subscribe(callback: (arg0: ItemUseOnEvent)=>void): (arg0: ItemUseOnEvent)=>void; unsubscribe(callback: (arg0: ItemUseOnEvent)=>void): void}
export class Location { constructor(x: number, y: number, z: number); x: number; y: number; z: number; equals(other: Location): boolean; isNear(other: Location, epsilon: number): boolean}
export class MinecraftBlockProperties { private constructor(); static readonly active: "active"; static readonly age: "age"; static readonly ageBit: "age_bit"; static readonly allowUnderwaterBit: "allow_underwater_bit"; static readonly attachedBit: "attached_bit"; static readonly attachment: "attachment"; static readonly bambooLeafSize: "bamboo_leaf_size"; static readonly bambooStalkThickness: "bamboo_stalk_thickness"; static readonly bigDripleafHead: "big_dripleaf_head"; static readonly bigDripleafTilt: "big_dripleaf_tilt"; static readonly biteCounter: "bite_counter"; static readonly blockLightLevel: "block_light_level"; static readonly bloom: "bloom"; static readonly brewingStandSlotABit: "brewing_stand_slot_a_bit"; static readonly brewingStandSlotBBit: "brewing_stand_slot_b_bit"; static readonly brewingStandSlotCBit: "brewing_stand_slot_c_bit"; static readonly buttonPressedBit: "button_pressed_bit"; static readonly candles: "candles"; static readonly canSummon: "can_summon"; static readonly cauldronLiquid: "cauldron_liquid"; static readonly chemistryTableType: "chemistry_table_type"; static readonly chiselType: "chisel_type"; static readonly clusterCount: "cluster_count"; static readonly color: "color"; static readonly colorBit: "color_bit"; static readonly composterFillLevel: "composter_fill_level"; static readonly conditionalBit: "conditional_bit"; static readonly coralColor: "coral_color"; static readonly coralDirection: "coral_direction"; static readonly coralFanDirection: "coral_fan_direction"; static readonly coralHangTypeBit: "coral_hang_type_bit"; static readonly coveredBit: "covered_bit"; static readonly crackedState: "cracked_state"; static readonly damage: "damage"; static readonly deadBit: "dead_bit"; static readonly deprecated: "deprecated"; static readonly direction: "direction"; static readonly dirtType: "dirt_type"; static readonly disarmedBit: "disarmed_bit"; static readonly doorHingeBit: "door_hinge_bit"; static readonly doublePlantType: "double_plant_type"; static readonly dragDown: "drag_down"; static readonly dripstoneThickness: "dripstone_thickness"; static readonly endPortalEyeBit: "end_portal_eye_bit"; static readonly explodeBit: "explode_bit"; static readonly extinguished: "extinguished"; static readonly facingDirection: "facing_direction"; static readonly fillLevel: "fill_level"; static readonly flowerType: "flower_type"; static readonly groundSignDirection: "ground_sign_direction"; static readonly growingPlantAge: "growing_plant_age"; static readonly growth: "growth"; static readonly hanging: "hanging"; static readonly headPieceBit: "head_piece_bit"; static readonly height: "height"; static readonly honeyLevel: "honey_level"; static readonly hugeMushroomBits: "huge_mushroom_bits"; static readonly infiniburnBit: "infiniburn_bit"; static readonly inWallBit: "in_wall_bit"; static readonly itemFrameMapBit: "item_frame_map_bit"; static readonly itemFramePhotoBit: "item_frame_photo_bit"; static readonly kelpAge: "kelp_age"; static readonly leverDirection: "lever_direction"; static readonly liquidDepth: "liquid_depth"; static readonly lit: "lit"; static readonly moisturizedAmount: "moisturized_amount"; static readonly monsterEggStoneType: "monster_egg_stone_type"; static readonly multiFaceDirectionBits: "multi_face_direction_bits"; static readonly newLeafType: "new_leaf_type"; static readonly newLogType: "new_log_type"; static readonly noDropBit: "no_drop_bit"; static readonly occupiedBit: "occupied_bit"; static readonly oldLeafType: "old_leaf_type"; static readonly oldLogType: "old_log_type"; static readonly openBit: "open_bit"; static readonly outputLitBit: "output_lit_bit"; static readonly outputSubtractBit: "output_subtract_bit"; static readonly persistentBit: "persistent_bit"; static readonly pillarAxis: "pillar_axis"; static readonly portalAxis: "portal_axis"; static readonly poweredBit: "powered_bit"; static readonly prismarineBlockType: "prismarine_block_type"; static readonly propaguleStage: "propagule_stage"; static readonly railDataBit: "rail_data_bit"; static readonly railDirection: "rail_direction"; static readonly redstoneSignal: "redstone_signal"; static readonly repeaterDelay: "repeater_delay"; static readonly respawnAnchorCharge: "respawn_anchor_charge"; static readonly rotation: "rotation"; static readonly sandStoneType: "sand_stone_type"; static readonly sandType: "sand_type"; static readonly saplingType: "sapling_type"; static readonly seaGrassType: "sea_grass_type"; static readonly spongeType: "sponge_type"; static readonly stability: "stability"; static readonly stabilityCheck: "stability_check"; static readonly stoneBrickType: "stone_brick_type"; static readonly stoneSlabType: "stone_slab_type"; static readonly stoneSlabType2: "stone_slab_type_2"; static readonly stoneSlabType3: "stone_slab_type_3"; static readonly stoneSlabType4: "stone_slab_type_4"; static readonly stoneType: "stone_type"; static readonly strippedBit: "stripped_bit"; static readonly structureBlockType: "structure_block_type"; static readonly structureVoidType: "structure_void_type"; static readonly suspendedBit: "suspended_bit"; static readonly tallGrassType: "tall_grass_type"; static readonly toggleBit: "toggle_bit"; static readonly topSlotBit: "top_slot_bit"; static readonly torchFacingDirection: "torch_facing_direction"; static readonly triggeredBit: "triggered_bit"; static readonly turtleEggCount: "turtle_egg_count"; static readonly twistingVinesAge: "twisting_vines_age"; static readonly updateBit: "update_bit"; static readonly upperBlockBit: "upper_block_bit"; static readonly upsideDownBit: "upside_down_bit"; static readonly vineDirectionBits: "vine_direction_bits"; static readonly wallBlockType: "wall_block_type"; static readonly wallConnectionTypeEast: "wall_connection_type_east"; static readonly wallConnectionTypeNorth: "wall_connection_type_north"; static readonly wallConnectionTypeSouth: "wall_connection_type_south"; static readonly wallConnectionTypeWest: "wall_connection_type_west"; static readonly wallPostBit: "wall_post_bit"; static readonly weepingVinesAge: "weeping_vines_age"; static readonly weirdoDirection: "weirdo_direction"; static readonly woodType: "wood_type"}
export class MinecraftBlockTypes { private constructor(); static readonly acaciaButton: void; static readonly acaciaDoor: void; static readonly acaciaFenceGate: void; static readonly acaciaPressurePlate: void; static readonly acaciaStairs: void; static readonly acaciaStandingSign: void; static readonly acaciaTrapdoor: void; static readonly acaciaWallSign: void; static readonly activatorRail: void; static readonly air: void; static readonly allow: void; static readonly amethystBlock: void; static readonly amethystCluster: void; static readonly ancientDebris: void; static readonly andesiteStairs: void; static readonly anvil: void; static readonly azalea: void; static readonly azaleaLeaves: void; static readonly azaleaLeavesFlowered: void; static readonly bamboo: void; static readonly bambooSapling: void; static readonly barrel: void; static readonly barrier: void; static readonly basalt: void; static readonly beacon: void; static readonly bed: void; static readonly bedrock: void; static readonly beehive: void; static readonly beeNest: void; static readonly beetroot: void; static readonly bell: void; static readonly bigDripleaf: void; static readonly birchButton: void; static readonly birchDoor: void; static readonly birchFenceGate: void; static readonly birchPressurePlate: void; static readonly birchStairs: void; static readonly birchStandingSign: void; static readonly birchTrapdoor: void; static readonly birchWallSign: void; static readonly blackCandle: void; static readonly blackCandleCake: void; static readonly blackGlazedTerracotta: void; static readonly blackstone: void; static readonly blackstoneDoubleSlab: void; static readonly blackstoneSlab: void; static readonly blackstoneStairs: void; static readonly blackstoneWall: void; static readonly blastFurnace: void; static readonly blueCandle: void; static readonly blueCandleCake: void; static readonly blueGlazedTerracotta: void; static readonly blueIce: void; static readonly boneBlock: void; static readonly bookshelf: void; static readonly borderBlock: void; static readonly brewingStand: void; static readonly brickBlock: void; static readonly brickStairs: void; static readonly brownCandle: void; static readonly brownCandleCake: void; static readonly brownGlazedTerracotta: void; static readonly brownMushroom: void; static readonly brownMushroomBlock: void; static readonly bubbleColumn: void; static readonly buddingAmethyst: void; static readonly cactus: void; static readonly cake: void; static readonly calcite: void; static readonly camera: void; static readonly campfire: void; static readonly candle: void; static readonly candleCake: void; static readonly carrots: void; static readonly cartographyTable: void; static readonly carvedPumpkin: void; static readonly cauldron: void; static readonly caveVines: void; static readonly caveVinesBodyWithBerries: void; static readonly caveVinesHeadWithBerries: void; static readonly chain: void; static readonly chainCommandBlock: void; static readonly chemicalHeat: void; static readonly chemistryTable: void; static readonly chest: void; static readonly chiseledDeepslate: void; static readonly chiseledNetherBricks: void; static readonly chiseledPolishedBlackstone: void; static readonly chorusFlower: void; static readonly chorusPlant: void; static readonly clay: void; static readonly clientRequestPlaceholderBlock: void; static readonly coalBlock: void; static readonly coalOre: void; static readonly cobbledDeepslate: void; static readonly cobbledDeepslateDoubleSlab: void; static readonly cobbledDeepslateSlab: void; static readonly cobbledDeepslateStairs: void; static readonly cobbledDeepslateWall: void; static readonly cobblestone: void; static readonly cobblestoneWall: void; static readonly cocoa: void; static readonly coloredTorchBp: void; static readonly coloredTorchRg: void; static readonly commandBlock: void; static readonly composter: void; static readonly conduit: void; static readonly copperBlock: void; static readonly copperOre: void; static readonly coralBlock: void; static readonly coralFan: void; static readonly coralFanDead: void; static readonly coralFanHang: void; static readonly coralFanHang2: void; static readonly coralFanHang3: void; static readonly crackedDeepslateBricks: void; static readonly crackedDeepslateTiles: void; static readonly crackedNetherBricks: void; static readonly crackedPolishedBlackstoneBricks: void; static readonly craftingTable: void; static readonly crimsonButton: void; static readonly crimsonDoor: void; static readonly crimsonDoubleSlab: void; static readonly crimsonFence: void; static readonly crimsonFenceGate: void; static readonly crimsonFungus: void; static readonly crimsonHyphae: void; static readonly crimsonNylium: void; static readonly crimsonPlanks: void; static readonly crimsonPressurePlate: void; static readonly crimsonRoots: void; static readonly crimsonSlab: void; static readonly crimsonStairs: void; static readonly crimsonStandingSign: void; static readonly crimsonStem: void; static readonly crimsonTrapdoor: void; static readonly crimsonWallSign: void; static readonly cryingObsidian: void; static readonly cutCopper: void; static readonly cutCopperSlab: void; static readonly cutCopperStairs: void; static readonly cyanCandle: void; static readonly cyanCandleCake: void; static readonly cyanGlazedTerracotta: void; static readonly darkOakButton: void; static readonly darkOakDoor: void; static readonly darkOakFenceGate: void; static readonly darkOakPressurePlate: void; static readonly darkOakStairs: void; static readonly darkoakStandingSign: void; static readonly darkOakTrapdoor: void; static readonly darkoakWallSign: void; static readonly darkPrismarineStairs: void; static readonly daylightDetector: void; static readonly daylightDetectorInverted: void; static readonly deadbush: void; static readonly deepslate: void; static readonly deepslateBrickDoubleSlab: void; static readonly deepslateBricks: void; static readonly deepslateBrickSlab: void; static readonly deepslateBrickStairs: void; static readonly deepslateBrickWall: void; static readonly deepslateCoalOre: void; static readonly deepslateCopperOre: void; static readonly deepslateDiamondOre: void; static readonly deepslateEmeraldOre: void; static readonly deepslateGoldOre: void; static readonly deepslateIronOre: void; static readonly deepslateLapisOre: void; static readonly deepslateRedstoneOre: void; static readonly deepslateTileDoubleSlab: void; static readonly deepslateTiles: void; static readonly deepslateTileSlab: void; static readonly deepslateTileStairs: void; static readonly deepslateTileWall: void; static readonly deny: void; static readonly detectorRail: void; static readonly diamondBlock: void; static readonly diamondOre: void; static readonly dioriteStairs: void; static readonly dirt: void; static readonly dirtWithRoots: void; static readonly dispenser: void; static readonly doubleCutCopperSlab: void; static readonly doublePlant: void; static readonly doubleStoneBlockSlab: void; static readonly doubleStoneBlockSlab2: void; static readonly doubleStoneBlockSlab3: void; static readonly doubleStoneBlockSlab4: void; static readonly doubleStoneSlab: void; static readonly doubleStoneSlab2: void; static readonly doubleStoneSlab3: void; static readonly doubleStoneSlab4: void; static readonly doubleWoodenSlab: void; static readonly dragonEgg: void; static readonly driedKelpBlock: void; static readonly dripstoneBlock: void; static readonly dropper: void; static readonly element0: void; static readonly element1: void; static readonly element10: void; static readonly element100: void; static readonly element101: void; static readonly element102: void; static readonly element103: void; static readonly element104: void; static readonly element105: void; static readonly element106: void; static readonly element107: void; static readonly element108: void; static readonly element109: void; static readonly element11: void; static readonly element110: void; static readonly element111: void; static readonly element112: void; static readonly element113: void; static readonly element114: void; static readonly element115: void; static readonly element116: void; static readonly element117: void; static readonly element118: void; static readonly element12: void; static readonly element13: void; static readonly element14: void; static readonly element15: void; static readonly element16: void; static readonly element17: void; static readonly element18: void; static readonly element19: void; static readonly element2: void; static readonly element20: void; static readonly element21: void; static readonly element22: void; static readonly element23: void; static readonly element24: void; static readonly element25: void; static readonly element26: void; static readonly element27: void; static readonly element28: void; static readonly element29: void; static readonly element3: void; static readonly element30: void; static readonly element31: void; static readonly element32: void; static readonly element33: void; static readonly element34: void; static readonly element35: void; static readonly element36: void; static readonly element37: void; static readonly element38: void; static readonly element39: void; static readonly element4: void; static readonly element40: void; static readonly element41: void; static readonly element42: void; static readonly element43: void; static readonly element44: void; static readonly element45: void; static readonly element46: void; static readonly element47: void; static readonly element48: void; static readonly element49: void; static readonly element5: void; static readonly element50: void; static readonly element51: void; static readonly element52: void; static readonly element53: void; static readonly element54: void; static readonly element55: void; static readonly element56: void; static readonly element57: void; static readonly element58: void; static readonly element59: void; static readonly element6: void; static readonly element60: void; static readonly element61: void; static readonly element62: void; static readonly element63: void; static readonly element64: void; static readonly element65: void; static readonly element66: void; static readonly element67: void; static readonly element68: void; static readonly element69: void; static readonly element7: void; static readonly element70: void; static readonly element71: void; static readonly element72: void; static readonly element73: void; static readonly element74: void; static readonly element75: void; static readonly element76: void; static readonly element77: void; static readonly element78: void; static readonly element79: void; static readonly element8: void; static readonly element80: void; static readonly element81: void; static readonly element82: void; static readonly element83: void; static readonly element84: void; static readonly element85: void; static readonly element86: void; static readonly element87: void; static readonly element88: void; static readonly element89: void; static readonly element9: void; static readonly element90: void; static readonly element91: void; static readonly element92: void; static readonly element93: void; static readonly element94: void; static readonly element95: void; static readonly element96: void; static readonly element97: void; static readonly element98: void; static readonly element99: void; static readonly emeraldBlock: void; static readonly emeraldOre: void; static readonly enchantingTable: void; static readonly endBricks: void; static readonly endBrickStairs: void; static readonly enderChest: void; static readonly endGateway: void; static readonly endPortal: void; static readonly endPortalFrame: void; static readonly endRod: void; static readonly endStone: void; static readonly exposedCopper: void; static readonly exposedCutCopper: void; static readonly exposedCutCopperSlab: void; static readonly exposedCutCopperStairs: void; static readonly exposedDoubleCutCopperSlab: void; static readonly farmland: void; static readonly fenceGate: void; static readonly fire: void; static readonly fletchingTable: void; static readonly floweringAzalea: void; static readonly flowerPot: void; static readonly flowingLava: void; static readonly flowingWater: void; static readonly frame: void; static readonly frogSpawn: void; static readonly frostedIce: void; static readonly furnace: void; static readonly gildedBlackstone: void; static readonly glass: void; static readonly glassPane: void; static readonly glowFrame: void; static readonly glowingobsidian: void; static readonly glowLichen: void; static readonly glowstone: void; static readonly goldBlock: void; static readonly goldenRail: void; static readonly goldOre: void; static readonly graniteStairs: void; static readonly grass: void; static readonly grassPath: void; static readonly gravel: void; static readonly grayCandle: void; static readonly grayCandleCake: void; static readonly grayGlazedTerracotta: void; static readonly greenCandle: void; static readonly greenCandleCake: void; static readonly greenGlazedTerracotta: void; static readonly grindstone: void; static readonly hangingRoots: void; static readonly hardenedClay: void; static readonly hardGlass: void; static readonly hardGlassPane: void; static readonly hardStainedGlass: void; static readonly hardStainedGlassPane: void; static readonly hayBlock: void; static readonly heavyWeightedPressurePlate: void; static readonly honeyBlock: void; static readonly honeycombBlock: void; static readonly hopper: void; static readonly ice: void; static readonly infestedDeepslate: void; static readonly infoUpdate: void; static readonly infoUpdate2: void; static readonly invisibleBedrock: void; static readonly ironBars: void; static readonly ironBlock: void; static readonly ironDoor: void; static readonly ironOre: void; static readonly ironTrapdoor: void; static readonly jigsaw: void; static readonly jukebox: void; static readonly jungleButton: void; static readonly jungleDoor: void; static readonly jungleFenceGate: void; static readonly junglePressurePlate: void; static readonly jungleStairs: void; static readonly jungleStandingSign: void; static readonly jungleTrapdoor: void; static readonly jungleWallSign: void; static readonly kelp: void; static readonly ladder: void; static readonly lantern: void; static readonly lapisBlock: void; static readonly lapisOre: void; static readonly largeAmethystBud: void; static readonly lava: void; static readonly leaves: void; static readonly leaves2: void; static readonly lectern: void; static readonly lever: void; static readonly lightBlock: void; static readonly lightBlueCandle: void; static readonly lightBlueCandleCake: void; static readonly lightBlueGlazedTerracotta: void; static readonly lightGrayCandle: void; static readonly lightGrayCandleCake: void; static readonly lightningRod: void; static readonly lightWeightedPressurePlate: void; static readonly limeCandle: void; static readonly limeCandleCake: void; static readonly limeGlazedTerracotta: void; static readonly litBlastFurnace: void; static readonly litDeepslateRedstoneOre: void; static readonly litFurnace: void; static readonly litPumpkin: void; static readonly litRedstoneLamp: void; static readonly litRedstoneOre: void; static readonly litSmoker: void; static readonly lodestone: void; static readonly loom: void; static readonly magentaCandle: void; static readonly magentaCandleCake: void; static readonly magentaGlazedTerracotta: void; static readonly magma: void; static readonly mangroveButton: void; static readonly mangroveDoor: void; static readonly mangroveDoubleSlab: void; static readonly mangroveFence: void; static readonly mangroveFenceGate: void; static readonly mangroveLeaves: void; static readonly mangroveLog: void; static readonly mangrovePlanks: void; static readonly mangrovePressurePlate: void; static readonly mangrovePropagule: void; static readonly mangroveRoots: void; static readonly mangroveSlab: void; static readonly mangroveStairs: void; static readonly mangroveStandingSign: void; static readonly mangroveTrapdoor: void; static readonly mangroveWallSign: void; static readonly mangroveWood: void; static readonly mediumAmethystBud: void; static readonly melonBlock: void; static readonly melonStem: void; static readonly mobSpawner: void; static readonly monsterEgg: void; static readonly mossBlock: void; static readonly mossCarpet: void; static readonly mossyCobblestone: void; static readonly mossyCobblestoneStairs: void; static readonly mossyStoneBrickStairs: void; static readonly movingBlock: void; static readonly mud: void; static readonly mudBrickDoubleSlab: void; static readonly mudBricks: void; static readonly mudBrickSlab: void; static readonly mudBrickStairs: void; static readonly mudBrickWall: void; static readonly muddyMangroveRoots: void; static readonly mycelium: void; static readonly netherBrick: void; static readonly netherBrickFence: void; static readonly netherBrickStairs: void; static readonly netherGoldOre: void; static readonly netheriteBlock: void; static readonly netherrack: void; static readonly netherreactor: void; static readonly netherSprouts: void; static readonly netherWart: void; static readonly netherWartBlock: void; static readonly normalStoneStairs: void; static readonly noteblock: void; static readonly oakStairs: void; static readonly observer: void; static readonly obsidian: void; static readonly ochreFroglight: void; static readonly orangeCandle: void; static readonly orangeCandleCake: void; static readonly orangeGlazedTerracotta: void; static readonly oxidizedCopper: void; static readonly oxidizedCutCopper: void; static readonly oxidizedCutCopperSlab: void; static readonly oxidizedCutCopperStairs: void; static readonly oxidizedDoubleCutCopperSlab: void; static readonly packedIce: void; static readonly packedMud: void; static readonly pearlescentFroglight: void; static readonly pinkCandle: void; static readonly pinkCandleCake: void; static readonly pinkGlazedTerracotta: void; static readonly piston: void; static readonly pistonArmCollision: void; static readonly podzol: void; static readonly pointedDripstone: void; static readonly polishedAndesiteStairs: void; static readonly polishedBasalt: void; static readonly polishedBlackstone: void; static readonly polishedBlackstoneBrickDoubleSlab: void; static readonly polishedBlackstoneBricks: void; static readonly polishedBlackstoneBrickSlab: void; static readonly polishedBlackstoneBrickStairs: void; static readonly polishedBlackstoneBrickWall: void; static readonly polishedBlackstoneButton: void; static readonly polishedBlackstoneDoubleSlab: void; static readonly polishedBlackstonePressurePlate: void; static readonly polishedBlackstoneSlab: void; static readonly polishedBlackstoneStairs: void; static readonly polishedBlackstoneWall: void; static readonly polishedDeepslate: void; static readonly polishedDeepslateDoubleSlab: void; static readonly polishedDeepslateSlab: void; static readonly polishedDeepslateStairs: void; static readonly polishedDeepslateWall: void; static readonly polishedDioriteStairs: void; static readonly polishedGraniteStairs: void; static readonly portal: void; static readonly potatoes: void; static readonly powderSnow: void; static readonly poweredComparator: void; static readonly poweredRepeater: void; static readonly prismarine: void; static readonly prismarineBricksStairs: void; static readonly prismarineStairs: void; static readonly pumpkin: void; static readonly pumpkinStem: void; static readonly purpleCandle: void; static readonly purpleCandleCake: void; static readonly purpleGlazedTerracotta: void; static readonly purpurBlock: void; static readonly purpurStairs: void; static readonly quartzBlock: void; static readonly quartzBricks: void; static readonly quartzOre: void; static readonly quartzStairs: void; static readonly rail: void; static readonly rawCopperBlock: void; static readonly rawGoldBlock: void; static readonly rawIronBlock: void; static readonly redCandle: void; static readonly redCandleCake: void; static readonly redFlower: void; static readonly redGlazedTerracotta: void; static readonly redMushroom: void; static readonly redMushroomBlock: void; static readonly redNetherBrick: void; static readonly redNetherBrickStairs: void; static readonly redSandstone: void; static readonly redSandstoneStairs: void; static readonly redstoneBlock: void; static readonly redstoneLamp: void; static readonly redstoneOre: void; static readonly redstoneTorch: void; static readonly redstoneWire: void; static readonly reeds: void; static readonly reinforcedDeepslate: void; static readonly repeatingCommandBlock: void; static readonly reserved6: void; static readonly respawnAnchor: void; static readonly sand: void; static readonly sandstone: void; static readonly sandstoneStairs: void; static readonly sapling: void; static readonly scaffolding: void; static readonly sculk: void; static readonly sculkCatalyst: void; static readonly sculkSensor: void; static readonly sculkShrieker: void; static readonly sculkVein: void; static readonly seagrass: void; static readonly seaLantern: void; static readonly seaPickle: void; static readonly shroomlight: void; static readonly silverGlazedTerracotta: void; static readonly skull: void; static readonly slime: void; static readonly smallAmethystBud: void; static readonly smallDripleafBlock: void; static readonly smithingTable: void; static readonly smoker: void; static readonly smoothBasalt: void; static readonly smoothQuartzStairs: void; static readonly smoothRedSandstoneStairs: void; static readonly smoothSandstoneStairs: void; static readonly smoothStone: void; static readonly snow: void; static readonly snowLayer: void; static readonly soulCampfire: void; static readonly soulFire: void; static readonly soulLantern: void; static readonly soulSand: void; static readonly soulSoil: void; static readonly soulTorch: void; static readonly sponge: void; static readonly sporeBlossom: void; static readonly spruceButton: void; static readonly spruceDoor: void; static readonly spruceFenceGate: void; static readonly sprucePressurePlate: void; static readonly spruceStairs: void; static readonly spruceStandingSign: void; static readonly spruceTrapdoor: void; static readonly spruceWallSign: void; static readonly standingBanner: void; static readonly standingSign: void; static readonly stickyPiston: void; static readonly stickyPistonArmCollision: void; static readonly stone: void; static readonly stoneBlockSlab: void; static readonly stoneBlockSlab2: void; static readonly stoneBlockSlab3: void; static readonly stoneBlockSlab4: void; static readonly stonebrick: void; static readonly stoneBrickStairs: void; static readonly stoneButton: void; static readonly stonecutter: void; static readonly stonecutterBlock: void; static readonly stonePressurePlate: void; static readonly stoneSlab: void; static readonly stoneSlab2: void; static readonly stoneSlab3: void; static readonly stoneSlab4: void; static readonly stoneStairs: void; static readonly strippedAcaciaLog: void; static readonly strippedBirchLog: void; static readonly strippedCrimsonHyphae: void; static readonly strippedCrimsonStem: void; static readonly strippedDarkOakLog: void; static readonly strippedJungleLog: void; static readonly strippedMangroveLog: void; static readonly strippedMangroveWood: void; static readonly strippedOakLog: void; static readonly strippedSpruceLog: void; static readonly strippedWarpedHyphae: void; static readonly strippedWarpedStem: void; static readonly structureBlock: void; static readonly structureVoid: void; static readonly sweetBerryBush: void; static readonly tallgrass: void; static readonly target: void; static readonly tintedGlass: void; static readonly tnt: void; static readonly torch: void; static readonly trapdoor: void; static readonly trappedChest: void; static readonly tripWire: void; static readonly tripwireHook: void; static readonly tuff: void; static readonly turtleEgg: void; static readonly twistingVines: void; static readonly underwaterTorch: void; static readonly undyedShulkerBox: void; static readonly unknown: void; static readonly unlitRedstoneTorch: void; static readonly unpoweredComparator: void; static readonly unpoweredRepeater: void; static readonly verdantFroglight: void; static readonly vine: void; static readonly wallBanner: void; static readonly wallSign: void; static readonly warpedButton: void; static readonly warpedDoor: void; static readonly warpedDoubleSlab: void; static readonly warpedFence: void; static readonly warpedFenceGate: void; static readonly warpedFungus: void; static readonly warpedHyphae: void; static readonly warpedNylium: void; static readonly warpedPlanks: void; static readonly warpedPressurePlate: void; static readonly warpedRoots: void; static readonly warpedSlab: void; static readonly warpedStairs: void; static readonly warpedStandingSign: void; static readonly warpedStem: void; static readonly warpedTrapdoor: void; static readonly warpedWallSign: void; static readonly warpedWartBlock: void; static readonly water: void; static readonly waterlily: void; static readonly waxedCopper: void; static readonly waxedCutCopper: void; static readonly waxedCutCopperSlab: void; static readonly waxedCutCopperStairs: void; static readonly waxedDoubleCutCopperSlab: void; static readonly waxedExposedCopper: void; static readonly waxedExposedCutCopper: void; static readonly waxedExposedCutCopperSlab: void; static readonly waxedExposedCutCopperStairs: void; static readonly waxedExposedDoubleCutCopperSlab: void; static readonly waxedOxidizedCopper: void; static readonly waxedOxidizedCutCopper: void; static readonly waxedOxidizedCutCopperSlab: void; static readonly waxedOxidizedCutCopperStairs: void; static readonly waxedOxidizedDoubleCutCopperSlab: void; static readonly waxedWeatheredCopper: void; static readonly waxedWeatheredCutCopper: void; static readonly waxedWeatheredCutCopperSlab: void; static readonly waxedWeatheredCutCopperStairs: void; static readonly waxedWeatheredDoubleCutCopperSlab: void; static readonly weatheredCopper: void; static readonly weatheredCutCopper: void; static readonly weatheredCutCopperSlab: void; static readonly weatheredCutCopperStairs: void; static readonly weatheredDoubleCutCopperSlab: void; static readonly web: void; static readonly weepingVines: void; static readonly wheat: void; static readonly whiteCandle: void; static readonly whiteCandleCake: void; static readonly whiteGlazedTerracotta: void; static readonly witherRose: void; static readonly wood: void; static readonly woodenButton: void; static readonly woodenDoor: void; static readonly woodenPressurePlate: void; static readonly woodenSlab: void; static readonly yellowCandle: void; static readonly yellowCandleCake: void; static readonly yellowFlower: void; static readonly yellowGlazedTerracotta: void; static get(typeName: string): BlockType; static getAllBlockTypes(): BlockType[]}
export class MinecraftDimensionTypes { private constructor(); static readonly nether: "minecraft:nether"; static readonly overworld: "minecraft:overworld"; static readonly theEnd: "minecraft:the_end"}
export class MinecraftEffectTypes { private constructor(); static readonly absorption: void; static readonly badOmen: void; static readonly blindness: void; static readonly conduitPower: void; static readonly darkness: void; static readonly empty: void; static readonly fatalPoison: void; static readonly fireResistance: void; static readonly haste: void; static readonly healthBoost: void; static readonly hunger: void; static readonly instantDamage: void; static readonly instantHealth: void; static readonly invisibility: void; static readonly jumpBoost: void; static readonly levitation: void; static readonly miningFatigue: void; static readonly nausea: void; static readonly nightVision: void; static readonly poison: void; static readonly regeneration: void; static readonly resistance: void; static readonly saturation: void; static readonly slowFalling: void; static readonly slowness: void; static readonly speed: void; static readonly strength: void; static readonly villageHero: void; static readonly waterBreathing: void; static readonly weakness: void; static readonly wither: void}
export class MinecraftItemTypes { private constructor(); static readonly acaciaBoat: void; static readonly acaciaButton: void; static readonly acaciaChestBoat: void; static readonly acaciaDoor: void; static readonly acaciaFence: void; static readonly acaciaFenceGate: void; static readonly acaciaPressurePlate: void; static readonly acaciaSign: void; static readonly acaciaStairs: void; static readonly acaciaStandingSign: void; static readonly acaciaTrapdoor: void; static readonly acaciaWallSign: void; static readonly activatorRail: void; static readonly agentSpawnEgg: void; static readonly air: void; static readonly allaySpawnEgg: void; static readonly allow: void; static readonly amethystBlock: void; static readonly amethystCluster: void; static readonly amethystShard: void; static readonly ancientDebris: void; static readonly andesiteStairs: void; static readonly anvil: void; static readonly apple: void; static readonly armorStand: void; static readonly arrow: void; static readonly axolotlBucket: void; static readonly axolotlSpawnEgg: void; static readonly azalea: void; static readonly azaleaLeaves: void; static readonly azaleaLeavesFlowered: void; static readonly bakedPotato: void; static readonly balloon: void; static readonly bamboo: void; static readonly bambooSapling: void; static readonly banner: void; static readonly bannerPattern: void; static readonly barrel: void; static readonly barrier: void; static readonly basalt: void; static readonly batSpawnEgg: void; static readonly beacon: void; static readonly bed: void; static readonly bedrock: void; static readonly beef: void; static readonly beehive: void; static readonly beeNest: void; static readonly beeSpawnEgg: void; static readonly beetroot: void; static readonly beetrootSeeds: void; static readonly beetrootSoup: void; static readonly bell: void; static readonly bigDripleaf: void; static readonly birchBoat: void; static readonly birchButton: void; static readonly birchChestBoat: void; static readonly birchDoor: void; static readonly birchFence: void; static readonly birchFenceGate: void; static readonly birchPressurePlate: void; static readonly birchSign: void; static readonly birchStairs: void; static readonly birchStandingSign: void; static readonly birchTrapdoor: void; static readonly birchWallSign: void; static readonly blackCandle: void; static readonly blackCandleCake: void; static readonly blackDye: void; static readonly blackGlazedTerracotta: void; static readonly blackstone: void; static readonly blackstoneDoubleSlab: void; static readonly blackstoneSlab: void; static readonly blackstoneStairs: void; static readonly blackstoneWall: void; static readonly blastFurnace: void; static readonly blazePowder: void; static readonly blazeRod: void; static readonly blazeSpawnEgg: void; static readonly bleach: void; static readonly blueCandle: void; static readonly blueCandleCake: void; static readonly blueDye: void; static readonly blueGlazedTerracotta: void; static readonly blueIce: void; static readonly boat: void; static readonly bone: void; static readonly boneBlock: void; static readonly boneMeal: void; static readonly book: void; static readonly bookshelf: void; static readonly borderBlock: void; static readonly bordureIndentedBannerPattern: void; static readonly bow: void; static readonly bowl: void; static readonly bread: void; static readonly brewingStand: void; static readonly brick: void; static readonly brickBlock: void; static readonly brickStairs: void; static readonly brownCandle: void; static readonly brownCandleCake: void; static readonly brownDye: void; static readonly brownGlazedTerracotta: void; static readonly brownMushroom: void; static readonly brownMushroomBlock: void; static readonly bubbleColumn: void; static readonly bucket: void; static readonly buddingAmethyst: void; static readonly cactus: void; static readonly cake: void; static readonly calcite: void; static readonly camera: void; static readonly campfire: void; static readonly candle: void; static readonly candleCake: void; static readonly carpet: void; static readonly carrot: void; static readonly carrotOnAStick: void; static readonly carrots: void; static readonly cartographyTable: void; static readonly carvedPumpkin: void; static readonly catSpawnEgg: void; static readonly cauldron: void; static readonly caveSpiderSpawnEgg: void; static readonly caveVines: void; static readonly caveVinesBodyWithBerries: void; static readonly caveVinesHeadWithBerries: void; static readonly chain: void; static readonly chainCommandBlock: void; static readonly chainmailBoots: void; static readonly chainmailChestplate: void; static readonly chainmailHelmet: void; static readonly chainmailLeggings: void; static readonly charcoal: void; static readonly chemicalHeat: void; static readonly chemistryTable: void; static readonly chest: void; static readonly chestBoat: void; static readonly chestMinecart: void; static readonly chicken: void; static readonly chickenSpawnEgg: void; static readonly chiseledDeepslate: void; static readonly chiseledNetherBricks: void; static readonly chiseledPolishedBlackstone: void; static readonly chorusFlower: void; static readonly chorusFruit: void; static readonly chorusPlant: void; static readonly clay: void; static readonly clayBall: void; static readonly clientRequestPlaceholderBlock: void; static readonly clock: void; static readonly coal: void; static readonly coalBlock: void; static readonly coalOre: void; static readonly cobbledDeepslate: void; static readonly cobbledDeepslateDoubleSlab: void; static readonly cobbledDeepslateSlab: void; static readonly cobbledDeepslateStairs: void; static readonly cobbledDeepslateWall: void; static readonly cobblestone: void; static readonly cobblestoneWall: void; static readonly cocoa: void; static readonly cocoaBeans: void; static readonly cod: void; static readonly codBucket: void; static readonly codSpawnEgg: void; static readonly coloredTorchBp: void; static readonly coloredTorchRg: void; static readonly commandBlock: void; static readonly commandBlockMinecart: void; static readonly comparator: void; static readonly compass: void; static readonly composter: void; static readonly compound: void; static readonly concrete: void; static readonly concretePowder: void; static readonly conduit: void; static readonly cookedBeef: void; static readonly cookedChicken: void; static readonly cookedCod: void; static readonly cookedMutton: void; static readonly cookedPorkchop: void; static readonly cookedRabbit: void; static readonly cookedSalmon: void; static readonly cookie: void; static readonly copperBlock: void; static readonly copperIngot: void; static readonly copperOre: void; static readonly coral: void; static readonly coralBlock: void; static readonly coralFan: void; static readonly coralFanDead: void; static readonly coralFanHang: void; static readonly coralFanHang2: void; static readonly coralFanHang3: void; static readonly cowSpawnEgg: void; static readonly crackedDeepslateBricks: void; static readonly crackedDeepslateTiles: void; static readonly crackedNetherBricks: void; static readonly crackedPolishedBlackstoneBricks: void; static readonly craftingTable: void; static readonly creeperBannerPattern: void; static readonly creeperSpawnEgg: void; static readonly crimsonButton: void; static readonly crimsonDoor: void; static readonly crimsonDoubleSlab: void; static readonly crimsonFence: void; static readonly crimsonFenceGate: void; static readonly crimsonFungus: void; static readonly crimsonHyphae: void; static readonly crimsonNylium: void; static readonly crimsonPlanks: void; static readonly crimsonPressurePlate: void; static readonly crimsonRoots: void; static readonly crimsonSign: void; static readonly crimsonSlab: void; static readonly crimsonStairs: void; static readonly crimsonStandingSign: void; static readonly crimsonStem: void; static readonly crimsonTrapdoor: void; static readonly crimsonWallSign: void; static readonly crossbow: void; static readonly cryingObsidian: void; static readonly cutCopper: void; static readonly cutCopperSlab: void; static readonly cutCopperStairs: void; static readonly cyanCandle: void; static readonly cyanCandleCake: void; static readonly cyanDye: void; static readonly cyanGlazedTerracotta: void; static readonly darkOakBoat: void; static readonly darkOakButton: void; static readonly darkOakChestBoat: void; static readonly darkOakDoor: void; static readonly darkOakFence: void; static readonly darkOakFenceGate: void; static readonly darkOakPressurePlate: void; static readonly darkOakSign: void; static readonly darkOakStairs: void; static readonly darkoakStandingSign: void; static readonly darkOakTrapdoor: void; static readonly darkoakWallSign: void; static readonly darkPrismarineStairs: void; static readonly daylightDetector: void; static readonly daylightDetectorInverted: void; static readonly deadbush: void; static readonly deepslate: void; static readonly deepslateBrickDoubleSlab: void; static readonly deepslateBricks: void; static readonly deepslateBrickSlab: void; static readonly deepslateBrickStairs: void; static readonly deepslateBrickWall: void; static readonly deepslateCoalOre: void; static readonly deepslateCopperOre: void; static readonly deepslateDiamondOre: void; static readonly deepslateEmeraldOre: void; static readonly deepslateGoldOre: void; static readonly deepslateIronOre: void; static readonly deepslateLapisOre: void; static readonly deepslateRedstoneOre: void; static readonly deepslateTileDoubleSlab: void; static readonly deepslateTiles: void; static readonly deepslateTileSlab: void; static readonly deepslateTileStairs: void; static readonly deepslateTileWall: void; static readonly deny: void; static readonly detectorRail: void; static readonly diamond: void; static readonly diamondAxe: void; static readonly diamondBlock: void; static readonly diamondBoots: void; static readonly diamondChestplate: void; static readonly diamondHelmet: void; static readonly diamondHoe: void; static readonly diamondHorseArmor: void; static readonly diamondLeggings: void; static readonly diamondOre: void; static readonly diamondPickaxe: void; static readonly diamondShovel: void; static readonly diamondSword: void; static readonly dioriteStairs: void; static readonly dirt: void; static readonly dirtWithRoots: void; static readonly discFragment5: void; static readonly dispenser: void; static readonly dolphinSpawnEgg: void; static readonly donkeySpawnEgg: void; static readonly doubleCutCopperSlab: void; static readonly doublePlant: void; static readonly doubleStoneBlockSlab: void; static readonly doubleStoneBlockSlab2: void; static readonly doubleStoneBlockSlab3: void; static readonly doubleStoneBlockSlab4: void; static readonly doubleWoodenSlab: void; static readonly dragonBreath: void; static readonly dragonEgg: void; static readonly driedKelp: void; static readonly driedKelpBlock: void; static readonly dripstoneBlock: void; static readonly dropper: void; static readonly drownedSpawnEgg: void; static readonly dye: void; static readonly echoShard: void; static readonly egg: void; static readonly elderGuardianSpawnEgg: void; static readonly element0: void; static readonly element1: void; static readonly element10: void; static readonly element100: void; static readonly element101: void; static readonly element102: void; static readonly element103: void; static readonly element104: void; static readonly element105: void; static readonly element106: void; static readonly element107: void; static readonly element108: void; static readonly element109: void; static readonly element11: void; static readonly element110: void; static readonly element111: void; static readonly element112: void; static readonly element113: void; static readonly element114: void; static readonly element115: void; static readonly element116: void; static readonly element117: void; static readonly element118: void; static readonly element12: void; static readonly element13: void; static readonly element14: void; static readonly element15: void; static readonly element16: void; static readonly element17: void; static readonly element18: void; static readonly element19: void; static readonly element2: void; static readonly element20: void; static readonly element21: void; static readonly element22: void; static readonly element23: void; static readonly element24: void; static readonly element25: void; static readonly element26: void; static readonly element27: void; static readonly element28: void; static readonly element29: void; static readonly element3: void; static readonly element30: void; static readonly element31: void; static readonly element32: void; static readonly element33: void; static readonly element34: void; static readonly element35: void; static readonly element36: void; static readonly element37: void; static readonly element38: void; static readonly element39: void; static readonly element4: void; static readonly element40: void; static readonly element41: void; static readonly element42: void; static readonly element43: void; static readonly element44: void; static readonly element45: void; static readonly element46: void; static readonly element47: void; static readonly element48: void; static readonly element49: void; static readonly element5: void; static readonly element50: void; static readonly element51: void; static readonly element52: void; static readonly element53: void; static readonly element54: void; static readonly element55: void; static readonly element56: void; static readonly element57: void; static readonly element58: void; static readonly element59: void; static readonly element6: void; static readonly element60: void; static readonly element61: void; static readonly element62: void; static readonly element63: void; static readonly element64: void; static readonly element65: void; static readonly element66: void; static readonly element67: void; static readonly element68: void; static readonly element69: void; static readonly element7: void; static readonly element70: void; static readonly element71: void; static readonly element72: void; static readonly element73: void; static readonly element74: void; static readonly element75: void; static readonly element76: void; static readonly element77: void; static readonly element78: void; static readonly element79: void; static readonly element8: void; static readonly element80: void; static readonly element81: void; static readonly element82: void; static readonly element83: void; static readonly element84: void; static readonly element85: void; static readonly element86: void; static readonly element87: void; static readonly element88: void; static readonly element89: void; static readonly element9: void; static readonly element90: void; static readonly element91: void; static readonly element92: void; static readonly element93: void; static readonly element94: void; static readonly element95: void; static readonly element96: void; static readonly element97: void; static readonly element98: void; static readonly element99: void; static readonly elytra: void; static readonly emerald: void; static readonly emeraldBlock: void; static readonly emeraldOre: void; static readonly emptyMap: void; static readonly enchantedBook: void; static readonly enchantedGoldenApple: void; static readonly enchantingTable: void; static readonly endBricks: void; static readonly endBrickStairs: void; static readonly endCrystal: void; static readonly enderChest: void; static readonly enderEye: void; static readonly endermanSpawnEgg: void; static readonly endermiteSpawnEgg: void; static readonly enderPearl: void; static readonly endGateway: void; static readonly endPortal: void; static readonly endPortalFrame: void; static readonly endRod: void; static readonly endStone: void; static readonly evokerSpawnEgg: void; static readonly experienceBottle: void; static readonly exposedCopper: void; static readonly exposedCutCopper: void; static readonly exposedCutCopperSlab: void; static readonly exposedCutCopperStairs: void; static readonly exposedDoubleCutCopperSlab: void; static readonly farmland: void; static readonly feather: void; static readonly fenceGate: void; static readonly fermentedSpiderEye: void; static readonly fieldMasonedBannerPattern: void; static readonly filledMap: void; static readonly fire: void; static readonly fireCharge: void; static readonly fireworkRocket: void; static readonly fireworkStar: void; static readonly fishingRod: void; static readonly fletchingTable: void; static readonly flint: void; static readonly flintAndSteel: void; static readonly flowerBannerPattern: void; static readonly floweringAzalea: void; static readonly flowerPot: void; static readonly flowingLava: void; static readonly flowingWater: void; static readonly foxSpawnEgg: void; static readonly frame: void; static readonly frogSpawn: void; static readonly frogSpawnEgg: void; static readonly frostedIce: void; static readonly furnace: void; static readonly ghastSpawnEgg: void; static readonly ghastTear: void; static readonly gildedBlackstone: void; static readonly glass: void; static readonly glassBottle: void; static readonly glassPane: void; static readonly glisteringMelonSlice: void; static readonly globeBannerPattern: void; static readonly glowBerries: void; static readonly glowFrame: void; static readonly glowingobsidian: void; static readonly glowInkSac: void; static readonly glowLichen: void; static readonly glowSquidSpawnEgg: void; static readonly glowStick: void; static readonly glowstone: void; static readonly glowstoneDust: void; static readonly goatHorn: void; static readonly goatSpawnEgg: void; static readonly goldBlock: void; static readonly goldenApple: void; static readonly goldenAxe: void; static readonly goldenBoots: void; static readonly goldenCarrot: void; static readonly goldenChestplate: void; static readonly goldenHelmet: void; static readonly goldenHoe: void; static readonly goldenHorseArmor: void; static readonly goldenLeggings: void; static readonly goldenPickaxe: void; static readonly goldenRail: void; static readonly goldenShovel: void; static readonly goldenSword: void; static readonly goldIngot: void; static readonly goldNugget: void; static readonly goldOre: void; static readonly graniteStairs: void; static readonly grass: void; static readonly grassPath: void; static readonly gravel: void; static readonly grayCandle: void; static readonly grayCandleCake: void; static readonly grayDye: void; static readonly grayGlazedTerracotta: void; static readonly greenCandle: void; static readonly greenCandleCake: void; static readonly greenDye: void; static readonly greenGlazedTerracotta: void; static readonly grindstone: void; static readonly guardianSpawnEgg: void; static readonly gunpowder: void; static readonly hangingRoots: void; static readonly hardenedClay: void; static readonly hardGlass: void; static readonly hardGlassPane: void; static readonly hardStainedGlass: void; static readonly hardStainedGlassPane: void; static readonly hayBlock: void; static readonly heartOfTheSea: void; static readonly heavyWeightedPressurePlate: void; static readonly hoglinSpawnEgg: void; static readonly honeyBlock: void; static readonly honeyBottle: void; static readonly honeycomb: void; static readonly honeycombBlock: void; static readonly hopper: void; static readonly hopperMinecart: void; static readonly horseSpawnEgg: void; static readonly huskSpawnEgg: void; static readonly ice: void; static readonly iceBomb: void; static readonly infestedDeepslate: void; static readonly infoUpdate: void; static readonly infoUpdate2: void; static readonly inkSac: void; static readonly invisibleBedrock: void; static readonly ironAxe: void; static readonly ironBars: void; static readonly ironBlock: void; static readonly ironBoots: void; static readonly ironChestplate: void; static readonly ironDoor: void; static readonly ironHelmet: void; static readonly ironHoe: void; static readonly ironHorseArmor: void; static readonly ironIngot: void; static readonly ironLeggings: void; static readonly ironNugget: void; static readonly ironOre: void; static readonly ironPickaxe: void; static readonly ironShovel: void; static readonly ironSword: void; static readonly ironTrapdoor: void; static readonly 'item.acaciaDoor': void; static readonly 'item.bed': void; static readonly 'item.beetroot': void; static readonly 'item.birchDoor': void; static readonly 'item.brewingStand': void; static readonly 'item.cake': void; static readonly 'item.camera': void; static readonly 'item.campfire': void; static readonly 'item.cauldron': void; static readonly 'item.chain': void; static readonly 'item.crimsonDoor': void; static readonly 'item.darkOakDoor': void; static readonly 'item.flowerPot': void; static readonly 'item.frame': void; static readonly 'item.glowFrame': void; static readonly 'item.hopper': void; static readonly 'item.ironDoor': void; static readonly 'item.jungleDoor': void; static readonly 'item.kelp': void; static readonly 'item.mangroveDoor': void; static readonly 'item.netherSprouts': void; static readonly 'item.netherWart': void; static readonly 'item.reeds': void; static readonly 'item.skull': void; static readonly 'item.soulCampfire': void; static readonly 'item.spruceDoor': void; static readonly 'item.warpedDoor': void; static readonly 'item.wheat': void; static readonly 'item.woodenDoor': void; static readonly jigsaw: void; static readonly jukebox: void; static readonly jungleBoat: void; static readonly jungleButton: void; static readonly jungleChestBoat: void; static readonly jungleDoor: void; static readonly jungleFence: void; static readonly jungleFenceGate: void; static readonly junglePressurePlate: void; static readonly jungleSign: void; static readonly jungleStairs: void; static readonly jungleStandingSign: void; static readonly jungleTrapdoor: void; static readonly jungleWallSign: void; static readonly kelp: void; static readonly ladder: void; static readonly lantern: void; static readonly lapisBlock: void; static readonly lapisLazuli: void; static readonly lapisOre: void; static readonly largeAmethystBud: void; static readonly lava: void; static readonly lavaBucket: void; static readonly lead: void; static readonly leather: void; static readonly leatherBoots: void; static readonly leatherChestplate: void; static readonly leatherHelmet: void; static readonly leatherHorseArmor: void; static readonly leatherLeggings: void; static readonly leaves: void; static readonly leaves2: void; static readonly lectern: void; static readonly lever: void; static readonly lightBlock: void; static readonly lightBlueCandle: void; static readonly lightBlueCandleCake: void; static readonly lightBlueDye: void; static readonly lightBlueGlazedTerracotta: void; static readonly lightGrayCandle: void; static readonly lightGrayCandleCake: void; static readonly lightGrayDye: void; static readonly lightningRod: void; static readonly lightWeightedPressurePlate: void; static readonly limeCandle: void; static readonly limeCandleCake: void; static readonly limeDye: void; static readonly limeGlazedTerracotta: void; static readonly lingeringPotion: void; static readonly litBlastFurnace: void; static readonly litDeepslateRedstoneOre: void; static readonly litFurnace: void; static readonly litPumpkin: void; static readonly litRedstoneLamp: void; static readonly litRedstoneOre: void; static readonly litSmoker: void; static readonly llamaSpawnEgg: void; static readonly lodestone: void; static readonly lodestoneCompass: void; static readonly log: void; static readonly log2: void; static readonly loom: void; static readonly magentaCandle: void; static readonly magentaCandleCake: void; static readonly magentaDye: void; static readonly magentaGlazedTerracotta: void; static readonly magma: void; static readonly magmaCream: void; static readonly magmaCubeSpawnEgg: void; static readonly mangroveBoat: void; static readonly mangroveButton: void; static readonly mangroveChestBoat: void; static readonly mangroveDoor: void; static readonly mangroveDoubleSlab: void; static readonly mangroveFence: void; static readonly mangroveFenceGate: void; static readonly mangroveLeaves: void; static readonly mangroveLog: void; static readonly mangrovePlanks: void; static readonly mangrovePressurePlate: void; static readonly mangrovePropagule: void; static readonly mangroveRoots: void; static readonly mangroveSign: void; static readonly mangroveSlab: void; static readonly mangroveStairs: void; static readonly mangroveStandingSign: void; static readonly mangroveTrapdoor: void; static readonly mangroveWallSign: void; static readonly mangroveWood: void; static readonly medicine: void; static readonly mediumAmethystBud: void; static readonly melonBlock: void; static readonly melonSeeds: void; static readonly melonSlice: void; static readonly melonStem: void; static readonly milkBucket: void; static readonly minecart: void; static readonly mobSpawner: void; static readonly mojangBannerPattern: void; static readonly monsterEgg: void; static readonly mooshroomSpawnEgg: void; static readonly mossBlock: void; static readonly mossCarpet: void; static readonly mossyCobblestone: void; static readonly mossyCobblestoneStairs: void; static readonly mossyStoneBrickStairs: void; static readonly movingBlock: void; static readonly mud: void; static readonly mudBrickDoubleSlab: void; static readonly mudBricks: void; static readonly mudBrickSlab: void; static readonly mudBrickStairs: void; static readonly mudBrickWall: void; static readonly muddyMangroveRoots: void; static readonly muleSpawnEgg: void; static readonly mushroomStew: void; static readonly musicDisc11: void; static readonly musicDisc13: void; static readonly musicDisc5: void; static readonly musicDiscBlocks: void; static readonly musicDiscCat: void; static readonly musicDiscChirp: void; static readonly musicDiscFar: void; static readonly musicDiscMall: void; static readonly musicDiscMellohi: void; static readonly musicDiscOtherside: void; static readonly musicDiscPigstep: void; static readonly musicDiscStal: void; static readonly musicDiscStrad: void; static readonly musicDiscWait: void; static readonly musicDiscWard: void; static readonly mutton: void; static readonly mycelium: void; static readonly nameTag: void; static readonly nautilusShell: void; static readonly netherbrick: void; static readonly netherBrick: void; static readonly netherBrickFence: void; static readonly netherBrickStairs: void; static readonly netherGoldOre: void; static readonly netheriteAxe: void; static readonly netheriteBlock: void; static readonly netheriteBoots: void; static readonly netheriteChestplate: void; static readonly netheriteHelmet: void; static readonly netheriteHoe: void; static readonly netheriteIngot: void; static readonly netheriteLeggings: void; static readonly netheritePickaxe: void; static readonly netheriteScrap: void; static readonly netheriteShovel: void; static readonly netheriteSword: void; static readonly netherrack: void; static readonly netherreactor: void; static readonly netherSprouts: void; static readonly netherStar: void; static readonly netherWart: void; static readonly netherWartBlock: void; static readonly normalStoneStairs: void; static readonly noteblock: void; static readonly npcSpawnEgg: void; static readonly oakBoat: void; static readonly oakChestBoat: void; static readonly oakFence: void; static readonly oakSign: void; static readonly oakStairs: void; static readonly observer: void; static readonly obsidian: void; static readonly ocelotSpawnEgg: void; static readonly ochreFroglight: void; static readonly orangeCandle: void; static readonly orangeCandleCake: void; static readonly orangeDye: void; static readonly orangeGlazedTerracotta: void; static readonly oxidizedCopper: void; static readonly oxidizedCutCopper: void; static readonly oxidizedCutCopperSlab: void; static readonly oxidizedCutCopperStairs: void; static readonly oxidizedDoubleCutCopperSlab: void; static readonly packedIce: void; static readonly packedMud: void; static readonly painting: void; static readonly pandaSpawnEgg: void; static readonly paper: void; static readonly parrotSpawnEgg: void; static readonly pearlescentFroglight: void; static readonly phantomMembrane: void; static readonly phantomSpawnEgg: void; static readonly piglinBannerPattern: void; static readonly piglinBruteSpawnEgg: void; static readonly piglinSpawnEgg: void; static readonly pigSpawnEgg: void; static readonly pillagerSpawnEgg: void; static readonly pinkCandle: void; static readonly pinkCandleCake: void; static readonly pinkDye: void; static readonly pinkGlazedTerracotta: void; static readonly piston: void; static readonly pistonArmCollision: void; static readonly planks: void; static readonly podzol: void; static readonly pointedDripstone: void; static readonly poisonousPotato: void; static readonly polarBearSpawnEgg: void; static readonly polishedAndesiteStairs: void; static readonly polishedBasalt: void; static readonly polishedBlackstone: void; static readonly polishedBlackstoneBrickDoubleSlab: void; static readonly polishedBlackstoneBricks: void; static readonly polishedBlackstoneBrickSlab: void; static readonly polishedBlackstoneBrickStairs: void; static readonly polishedBlackstoneBrickWall: void; static readonly polishedBlackstoneButton: void; static readonly polishedBlackstoneDoubleSlab: void; static readonly polishedBlackstonePressurePlate: void; static readonly polishedBlackstoneSlab: void; static readonly polishedBlackstoneStairs: void; static readonly polishedBlackstoneWall: void; static readonly polishedDeepslate: void; static readonly polishedDeepslateDoubleSlab: void; static readonly polishedDeepslateSlab: void; static readonly polishedDeepslateStairs: void; static readonly polishedDeepslateWall: void; static readonly polishedDioriteStairs: void; static readonly polishedGraniteStairs: void; static readonly poppedChorusFruit: void; static readonly porkchop: void; static readonly portal: void; static readonly potato: void; static readonly potatoes: void; static readonly potion: void; static readonly powderSnow: void; static readonly powderSnowBucket: void; static readonly poweredComparator: void; static readonly poweredRepeater: void; static readonly prismarine: void; static readonly prismarineBricksStairs: void; static readonly prismarineCrystals: void; static readonly prismarineShard: void; static readonly prismarineStairs: void; static readonly pufferfish: void; static readonly pufferfishBucket: void; static readonly pufferfishSpawnEgg: void; static readonly pumpkin: void; static readonly pumpkinPie: void; static readonly pumpkinSeeds: void; static readonly pumpkinStem: void; static readonly purpleCandle: void; static readonly purpleCandleCake: void; static readonly purpleDye: void; static readonly purpleGlazedTerracotta: void; static readonly purpurBlock: void; static readonly purpurStairs: void; static readonly quartz: void; static readonly quartzBlock: void; static readonly quartzBricks: void; static readonly quartzOre: void; static readonly quartzStairs: void; static readonly rabbit: void; static readonly rabbitFoot: void; static readonly rabbitHide: void; static readonly rabbitSpawnEgg: void; static readonly rabbitStew: void; static readonly rail: void; static readonly rapidFertilizer: void; static readonly ravagerSpawnEgg: void; static readonly rawCopper: void; static readonly rawCopperBlock: void; static readonly rawGold: void; static readonly rawGoldBlock: void; static readonly rawIron: void; static readonly rawIronBlock: void; static readonly recoveryCompass: void; static readonly redCandle: void; static readonly redCandleCake: void; static readonly redDye: void; static readonly redFlower: void; static readonly redGlazedTerracotta: void; static readonly redMushroom: void; static readonly redMushroomBlock: void; static readonly redNetherBrick: void; static readonly redNetherBrickStairs: void; static readonly redSandstone: void; static readonly redSandstoneStairs: void; static readonly redstone: void; static readonly redstoneBlock: void; static readonly redstoneLamp: void; static readonly redstoneOre: void; static readonly redstoneTorch: void; static readonly redstoneWire: void; static readonly reinforcedDeepslate: void; static readonly repeater: void; static readonly repeatingCommandBlock: void; static readonly reserved6: void; static readonly respawnAnchor: void; static readonly rottenFlesh: void; static readonly saddle: void; static readonly salmon: void; static readonly salmonBucket: void; static readonly salmonSpawnEgg: void; static readonly sand: void; static readonly sandstone: void; static readonly sandstoneStairs: void; static readonly sapling: void; static readonly scaffolding: void; static readonly sculk: void; static readonly sculkCatalyst: void; static readonly sculkSensor: void; static readonly sculkShrieker: void; static readonly sculkVein: void; static readonly scute: void; static readonly seagrass: void; static readonly seaLantern: void; static readonly seaPickle: void; static readonly shears: void; static readonly sheepSpawnEgg: void; static readonly shield: void; static readonly shroomlight: void; static readonly shulkerBox: void; static readonly shulkerShell: void; static readonly shulkerSpawnEgg: void; static readonly silverfishSpawnEgg: void; static readonly silverGlazedTerracotta: void; static readonly skeletonHorseSpawnEgg: void; static readonly skeletonSpawnEgg: void; static readonly skull: void; static readonly skullBannerPattern: void; static readonly slime: void; static readonly slimeBall: void; static readonly slimeSpawnEgg: void; static readonly smallAmethystBud: void; static readonly smallDripleafBlock: void; static readonly smithingTable: void; static readonly smoker: void; static readonly smoothBasalt: void; static readonly smoothQuartzStairs: void; static readonly smoothRedSandstoneStairs: void; static readonly smoothSandstoneStairs: void; static readonly smoothStone: void; static readonly snow: void; static readonly snowball: void; static readonly snowLayer: void; static readonly soulCampfire: void; static readonly soulFire: void; static readonly soulLantern: void; static readonly soulSand: void; static readonly soulSoil: void; static readonly soulTorch: void; static readonly sparkler: void; static readonly spawnEgg: void; static readonly spiderEye: void; static readonly spiderSpawnEgg: void; static readonly splashPotion: void; static readonly sponge: void; static readonly sporeBlossom: void; static readonly spruceBoat: void; static readonly spruceButton: void; static readonly spruceChestBoat: void; static readonly spruceDoor: void; static readonly spruceFence: void; static readonly spruceFenceGate: void; static readonly sprucePressurePlate: void; static readonly spruceSign: void; static readonly spruceStairs: void; static readonly spruceStandingSign: void; static readonly spruceTrapdoor: void; static readonly spruceWallSign: void; static readonly spyglass: void; static readonly squidSpawnEgg: void; static readonly stainedGlass: void; static readonly stainedGlassPane: void; static readonly stainedHardenedClay: void; static readonly standingBanner: void; static readonly standingSign: void; static readonly stick: void; static readonly stickyPiston: void; static readonly stickyPistonArmCollision: void; static readonly stone: void; static readonly stoneAxe: void; static readonly stoneBlockSlab: void; static readonly stoneBlockSlab2: void; static readonly stoneBlockSlab3: void; static readonly stoneBlockSlab4: void; static readonly stonebrick: void; static readonly stoneBrickStairs: void; static readonly stoneButton: void; static readonly stonecutter: void; static readonly stonecutterBlock: void; static readonly stoneHoe: void; static readonly stonePickaxe: void; static readonly stonePressurePlate: void; static readonly stoneShovel: void; static readonly stoneStairs: void; static readonly stoneSword: void; static readonly straySpawnEgg: void; static readonly striderSpawnEgg: void; static readonly string: void; static readonly strippedAcaciaLog: void; static readonly strippedBirchLog: void; static readonly strippedCrimsonHyphae: void; static readonly strippedCrimsonStem: void; static readonly strippedDarkOakLog: void; static readonly strippedJungleLog: void; static readonly strippedMangroveLog: void; static readonly strippedMangroveWood: void; static readonly strippedOakLog: void; static readonly strippedSpruceLog: void; static readonly strippedWarpedHyphae: void; static readonly strippedWarpedStem: void; static readonly structureBlock: void; static readonly structureVoid: void; static readonly sugar: void; static readonly sugarCane: void; static readonly suspiciousStew: void; static readonly sweetBerries: void; static readonly sweetBerryBush: void; static readonly tadpoleBucket: void; static readonly tadpoleSpawnEgg: void; static readonly tallgrass: void; static readonly target: void; static readonly tintedGlass: void; static readonly tnt: void; static readonly tntMinecart: void; static readonly torch: void; static readonly totemOfUndying: void; static readonly traderLlamaSpawnEgg: void; static readonly trapdoor: void; static readonly trappedChest: void; static readonly trident: void; static readonly tripWire: void; static readonly tripwireHook: void; static readonly tropicalFish: void; static readonly tropicalFishBucket: void; static readonly tropicalFishSpawnEgg: void; static readonly tuff: void; static readonly turtleEgg: void; static readonly turtleHelmet: void; static readonly turtleSpawnEgg: void; static readonly twistingVines: void; static readonly underwaterTorch: void; static readonly undyedShulkerBox: void; static readonly unknown: void; static readonly unlitRedstoneTorch: void; static readonly unpoweredComparator: void; static readonly unpoweredRepeater: void; static readonly verdantFroglight: void; static readonly vexSpawnEgg: void; static readonly villagerSpawnEgg: void; static readonly vindicatorSpawnEgg: void; static readonly vine: void; static readonly wallBanner: void; static readonly wallSign: void; static readonly wanderingTraderSpawnEgg: void; static readonly wardenSpawnEgg: void; static readonly warpedButton: void; static readonly warpedDoor: void; static readonly warpedDoubleSlab: void; static readonly warpedFence: void; static readonly warpedFenceGate: void; static readonly warpedFungus: void; static readonly warpedFungusOnAStick: void; static readonly warpedHyphae: void; static readonly warpedNylium: void; static readonly warpedPlanks: void; static readonly warpedPressurePlate: void; static readonly warpedRoots: void; static readonly warpedSign: void; static readonly warpedSlab: void; static readonly warpedStairs: void; static readonly warpedStandingSign: void; static readonly warpedStem: void; static readonly warpedTrapdoor: void; static readonly warpedWallSign: void; static readonly warpedWartBlock: void; static readonly water: void; static readonly waterBucket: void; static readonly waterlily: void; static readonly waxedCopper: void; static readonly waxedCutCopper: void; static readonly waxedCutCopperSlab: void; static readonly waxedCutCopperStairs: void; static readonly waxedDoubleCutCopperSlab: void; static readonly waxedExposedCopper: void; static readonly waxedExposedCutCopper: void; static readonly waxedExposedCutCopperSlab: void; static readonly waxedExposedCutCopperStairs: void; static readonly waxedExposedDoubleCutCopperSlab: void; static readonly waxedOxidizedCopper: void; static readonly waxedOxidizedCutCopper: void; static readonly waxedOxidizedCutCopperSlab: void; static readonly waxedOxidizedCutCopperStairs: void; static readonly waxedOxidizedDoubleCutCopperSlab: void; static readonly waxedWeatheredCopper: void; static readonly waxedWeatheredCutCopper: void; static readonly waxedWeatheredCutCopperSlab: void; static readonly waxedWeatheredCutCopperStairs: void; static readonly waxedWeatheredDoubleCutCopperSlab: void; static readonly weatheredCopper: void; static readonly weatheredCutCopper: void; static readonly weatheredCutCopperSlab: void; static readonly weatheredCutCopperStairs: void; static readonly weatheredDoubleCutCopperSlab: void; static readonly web: void; static readonly weepingVines: void; static readonly wheat: void; static readonly wheatSeeds: void; static readonly whiteCandle: void; static readonly whiteCandleCake: void; static readonly whiteDye: void; static readonly whiteGlazedTerracotta: void; static readonly witchSpawnEgg: void; static readonly witherRose: void; static readonly witherSkeletonSpawnEgg: void; static readonly wolfSpawnEgg: void; static readonly wood: void; static readonly woodenAxe: void; static readonly woodenButton: void; static readonly woodenDoor: void; static readonly woodenHoe: void; static readonly woodenPickaxe: void; static readonly woodenPressurePlate: void; static readonly woodenShovel: void; static readonly woodenSlab: void; static readonly woodenSword: void; static readonly wool: void; static readonly writableBook: void; static readonly writtenBook: void; static readonly yellowCandle: void; static readonly yellowCandleCake: void; static readonly yellowDye: void; static readonly yellowFlower: void; static readonly yellowGlazedTerracotta: void; static readonly zoglinSpawnEgg: void; static readonly zombieHorseSpawnEgg: void; static readonly zombiePigmanSpawnEgg: void; static readonly zombieSpawnEgg: void; static readonly zombieVillagerSpawnEgg: void}
export class MolangVariableMap { constructor(); setColorRGB(variableName: string, color: Color): void; setColorRGBA(variableName: string, color: Color): void; setSpeedAndDirection(variableName: string, speed: number, direction: Vector): MolangVariableMap; setVector3(variableName: string, vector: Vector): MolangVariableMap}
export class MusicOptions { constructor(); fade?: number; loop?: boolean; volume?: number}
export class NavigationResult { private constructor(); readonly isFullPath: boolean; readonly path: BlockLocation[]}
export class NumberRange { private constructor(); max: number; min: number; next(): number}
//@ts-ignore allow class inheritance for native classes
export class Player extends Entity{ private constructor(); readonly name: string; selectedSlot: number; getItemCooldown(itemCategory: string): number; playSound(soundId: string, soundOptions?: SoundOptions): void; postClientMessage(id: string, value: string): void; startItemCooldown(itemCategory: string, tickDuration: number): void}
export class PlayerInventoryComponentContainer { private constructor(); readonly emptySlotsCount: number; readonly size: number; addItem(itemStack: ItemStack): void; getItem(slot: number): ItemStack; setItem(slot: number, itemStack: ItemStack): void; swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean; transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean}
export class PlayerIterator { private constructor()}
export class PlayerJoinEvent { private constructor(); player: Player}
export class PlayerJoinEventSignal { private constructor(); subscribe(callback: (arg0: PlayerJoinEvent)=>void): (arg0: PlayerJoinEvent)=>void; unsubscribe(callback: (arg0: PlayerJoinEvent)=>void): void}
export class PlayerLeaveEvent { private constructor(); readonly playerName: string}
export class PlayerLeaveEventSignal { private constructor(); subscribe(callback: (arg0: PlayerLeaveEvent)=>void): (arg0: PlayerLeaveEvent)=>void; unsubscribe(callback: (arg0: PlayerLeaveEvent)=>void): void}
export class PropertyRegistry { private constructor(); registerEntityTypeDynamicProperties(propertiesDefinition: DynamicPropertiesDefinition, entityTypeOrId: EntityType | string): void; registerWorldDynamicProperties(propertiesDefinition: DynamicPropertiesDefinition): void}
export class Scoreboard { private constructor(); getObjective(objectiveId: string): ScoreboardObjective; getObjectives(): ScoreboardObjective[]; getParticipants(): ScoreboardIdentity[]}
export class ScoreboardIdentity { private constructor(); readonly displayName: string; readonly id: number; readonly 'type': ScoreboardIdentityType; getEntity(): Entity}
export class ScoreboardObjective { private constructor(); readonly displayName: string; readonly id: string; getParticipants(): ScoreboardIdentity[]; getScore(participant: Entity | ScoreboardIdentity | string): number; getScores(): ScoreboardScoreInfo[]}
export class ScoreboardScoreInfo { private constructor(); readonly participant: ScoreboardIdentity; readonly score: number}
export class Seat { private constructor(); readonly lockRiderRotation: number; readonly maxRiderCount: number; readonly minRiderCount: number; readonly position: Location}
export class SoundOptions { constructor(); location?: Location; pitch?: number; volume?: number}
//@ts-ignore allow class inheritance for native classes
export class StringBlockProperty extends IBlockProperty{ private constructor(); readonly validValues: string[]; value: string}
export class TickEvent { private constructor(); readonly currentTick: number; readonly deltaTime: number}
export class TickEventSignal { private constructor(); subscribe(callback: (arg0: TickEvent)=>void): (arg0: TickEvent)=>void; unsubscribe(callback: (arg0: TickEvent)=>void): void}
export class Trigger { constructor(eventName: string); eventName: string}
export class Vector { constructor(x: number, y: number, z: number); static readonly back: void; static readonly down: void; static readonly forward: void; static readonly left: void; static readonly one: void; static readonly right: void; static readonly up: void; static readonly zero: void; static add(a: Vector, b: Vector): Vector; static cross(a: Vector, b: Vector): Vector; static distance(a: Vector, b: Vector): number; static divide(a: Vector, b: number | Vector): Vector; static lerp(a: Vector, b: Vector, t: number): Vector; static max(a: Vector, b: Vector): Vector; static min(a: Vector, b: Vector): Vector; static multiply(a: Vector, b: number | Vector): Vector; static slerp(a: Vector, b: Vector, t: number): Vector; static subtract(a: Vector, b: Vector): Vector; x: number; y: number; z: number; equals(other: Vector): boolean; length(): number; normalized(): Vector}
export class WeatherChangeEvent { private constructor(); readonly dimension: string; readonly lightning: boolean; readonly raining: boolean}
export class WeatherChangeEventSignal { private constructor(); subscribe(callback: (arg0: WeatherChangeEvent)=>void): (arg0: WeatherChangeEvent)=>void; unsubscribe(callback: (arg0: WeatherChangeEvent)=>void): void}
export class World { private constructor(); readonly events: Events; readonly scoreboard: Scoreboard; broadcastClientMessage(id: string, value: string): void; getDimension(dimensionId: string): Dimension; getDynamicProperty(identifier: string): boolean | number | number | Location | string; getPlayers(options?: EntityQueryOptions): PlayerIterator; playMusic(trackId: string, musicOptions?: MusicOptions): void; playSound(soundID: string, soundOptions?: SoundOptions): void; queueMusic(trackId: string, musicOptions?: MusicOptions): void; removeDynamicProperty(identifier: string): boolean; setDynamicProperty(identifier: string, value: boolean | number | number | Location | string): void; stopMusic(): void}
export class WorldInitializeEvent { private constructor(); readonly propertyRegistry: PropertyRegistry}
export class WorldInitializeEventSignal { private constructor(); subscribe(callback: (arg0: WorldInitializeEvent)=>void): (arg0: WorldInitializeEvent)=>void; unsubscribe(callback: (arg0: WorldInitializeEvent)=>void): void}
export class XYRotation { private constructor(); x: number; y: number}
export const TicksPerSecond = 20;
export const world: World;